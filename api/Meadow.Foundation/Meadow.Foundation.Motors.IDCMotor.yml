### YamlMime:ManagedReference
items:
- uid: Meadow.Foundation.Motors.IDCMotor
  commentId: T:Meadow.Foundation.Motors.IDCMotor
  id: IDCMotor
  parent: Meadow.Foundation.Motors
  children:
  - Meadow.Foundation.Motors.IDCMotor.IsNeutral
  - Meadow.Foundation.Motors.IDCMotor.Speed
  langs:
  - csharp
  - vb
  name: IDCMotor
  nameWithType: IDCMotor
  fullName: Meadow.Foundation.Motors.IDCMotor
  type: Interface
  source:
    remote:
      path: Source/Meadow.Foundation/Motors/IDCMotor.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: IDCMotor
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Motors/IDCMotor.cs
    startLine: 2
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation.Motors
  syntax:
    content: public interface IDCMotor
    content.vb: Public Interface IDCMotor
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Meadow.Foundation.Motors.IDCMotor.Speed
  commentId: P:Meadow.Foundation.Motors.IDCMotor.Speed
  id: Speed
  parent: Meadow.Foundation.Motors.IDCMotor
  langs:
  - csharp
  - vb
  name: Speed
  nameWithType: IDCMotor.Speed
  fullName: Meadow.Foundation.Motors.IDCMotor.Speed
  type: Property
  source:
    remote:
      path: Source/Meadow.Foundation/Motors/IDCMotor.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: Speed
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Motors/IDCMotor.cs
    startLine: 7
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation.Motors
  summary: "\nThe speed of the motor from -1 to 1.\n"
  example: []
  syntax:
    content: float Speed { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Property Speed As Single
  overload: Meadow.Foundation.Motors.IDCMotor.Speed*
  modifiers.csharp:
  - get
  - set
- uid: Meadow.Foundation.Motors.IDCMotor.IsNeutral
  commentId: P:Meadow.Foundation.Motors.IDCMotor.IsNeutral
  id: IsNeutral
  parent: Meadow.Foundation.Motors.IDCMotor
  langs:
  - csharp
  - vb
  name: IsNeutral
  nameWithType: IDCMotor.IsNeutral
  fullName: Meadow.Foundation.Motors.IDCMotor.IsNeutral
  type: Property
  source:
    remote:
      path: Source/Meadow.Foundation/Motors/IDCMotor.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: IsNeutral
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Motors/IDCMotor.cs
    startLine: 12
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation.Motors
  summary: "\nWhen true, the wheels spin &quot;freely&quot;\n"
  example: []
  syntax:
    content: bool IsNeutral { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property IsNeutral As Boolean
  overload: Meadow.Foundation.Motors.IDCMotor.IsNeutral*
  modifiers.csharp:
  - get
  - set
references:
- uid: Meadow.Foundation.Motors
  commentId: N:Meadow.Foundation.Motors
  name: Meadow.Foundation.Motors
  nameWithType: Meadow.Foundation.Motors
  fullName: Meadow.Foundation.Motors
- uid: Meadow.Foundation.Motors.IDCMotor.Speed*
  commentId: Overload:Meadow.Foundation.Motors.IDCMotor.Speed
  name: Speed
  nameWithType: IDCMotor.Speed
  fullName: Meadow.Foundation.Motors.IDCMotor.Speed
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Meadow.Foundation.Motors.IDCMotor.IsNeutral*
  commentId: Overload:Meadow.Foundation.Motors.IDCMotor.IsNeutral
  name: IsNeutral
  nameWithType: IDCMotor.IsNeutral
  fullName: Meadow.Foundation.Motors.IDCMotor.IsNeutral
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
