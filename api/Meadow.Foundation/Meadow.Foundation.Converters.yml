### YamlMime:ManagedReference
items:
- uid: Meadow.Foundation.Converters
  commentId: T:Meadow.Foundation.Converters
  id: Converters
  parent: Meadow.Foundation
  children:
  - Meadow.Foundation.Converters.BCDToByte(System.Byte)
  - Meadow.Foundation.Converters.ByteToBCD(System.Byte)
  - Meadow.Foundation.Converters.Double(System.String,System.Double)
  - Meadow.Foundation.Converters.HsvToRgb(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)
  - Meadow.Foundation.Converters.Integer(System.String,System.Int32)
  langs:
  - csharp
  - vb
  name: Converters
  nameWithType: Converters
  fullName: Meadow.Foundation.Converters
  type: Class
  source:
    remote:
      path: Source/Meadow.Foundation/Helpers/Converters.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: Converters
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Helpers/Converters.cs
    startLine: 10
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation
  summary: "\nProvide a mechanism to convert from on type (typically string) to\nanother .NET type.\nThis class provide methods that are available in .NET not in NETMF, for\nexample double.TryParse is available, but int.TryParse is not.\n"
  example: []
  syntax:
    content: 'public class Converters : object'
    content.vb: >-
      Public Class Converters
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Meadow.Foundation.Converters.Integer(System.String,System.Int32)
  commentId: M:Meadow.Foundation.Converters.Integer(System.String,System.Int32)
  id: Integer(System.String,System.Int32)
  parent: Meadow.Foundation.Converters
  langs:
  - csharp
  - vb
  name: Integer(String, Int32)
  nameWithType: Converters.Integer(String, Int32)
  fullName: Meadow.Foundation.Converters.Integer(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Source/Meadow.Foundation/Helpers/Converters.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: Integer
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Helpers/Converters.cs
    startLine: 19
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation
  summary: "\nParse a string and return the integer representation of the string or the\ndefault value.\n"
  example: []
  syntax:
    content: public static int Integer(string value, int defaultValue = 0)
    parameters:
    - id: value
      type: System.String
      description: String containing the value to be converted.
    - id: defaultValue
      type: System.Int32
      description: Default value in the case where the string cannot be parsed.
    return:
      type: System.Int32
      description: Integer representation of the string or the default value.
    content.vb: Public Shared Function Integer(value As String, defaultValue As Integer = 0) As Integer
  overload: Meadow.Foundation.Converters.Integer*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Meadow.Foundation.Converters.Double(System.String,System.Double)
  commentId: M:Meadow.Foundation.Converters.Double(System.String,System.Double)
  id: Double(System.String,System.Double)
  parent: Meadow.Foundation.Converters
  langs:
  - csharp
  - vb
  name: Double(String, Double)
  nameWithType: Converters.Double(String, Double)
  fullName: Meadow.Foundation.Converters.Double(System.String, System.Double)
  type: Method
  source:
    remote:
      path: Source/Meadow.Foundation/Helpers/Converters.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: Double
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Helpers/Converters.cs
    startLine: 37
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation
  summary: "\nParse a string and return the double representation of the string or the\ndefault value.\n"
  example: []
  syntax:
    content: public static double Double(string value, double defaultValue = 0)
    parameters:
    - id: value
      type: System.String
      description: String containing the value to be converted.
    - id: defaultValue
      type: System.Double
      description: Default value in the case where the string cannot be parsed.
    return:
      type: System.Double
      description: Double representation of the string or the default value.
    content.vb: Public Shared Function Double(value As String, defaultValue As Double = 0) As Double
  overload: Meadow.Foundation.Converters.Double*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Meadow.Foundation.Converters.BCDToByte(System.Byte)
  commentId: M:Meadow.Foundation.Converters.BCDToByte(System.Byte)
  id: BCDToByte(System.Byte)
  parent: Meadow.Foundation.Converters
  langs:
  - csharp
  - vb
  name: BCDToByte(Byte)
  nameWithType: Converters.BCDToByte(Byte)
  fullName: Meadow.Foundation.Converters.BCDToByte(System.Byte)
  type: Method
  source:
    remote:
      path: Source/Meadow.Foundation/Helpers/Converters.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: BCDToByte
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Helpers/Converters.cs
    startLine: 53
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation
  summary: "\nConvert a BCD value in a byte into a decimal representation.\n"
  example: []
  syntax:
    content: public static byte BCDToByte(byte bcd)
    parameters:
    - id: bcd
      type: System.Byte
      description: BCD value to decode.
    return:
      type: System.Byte
      description: Decimal version of the BCD value.
    content.vb: Public Shared Function BCDToByte(bcd As Byte) As Byte
  overload: Meadow.Foundation.Converters.BCDToByte*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Meadow.Foundation.Converters.ByteToBCD(System.Byte)
  commentId: M:Meadow.Foundation.Converters.ByteToBCD(System.Byte)
  id: ByteToBCD(System.Byte)
  parent: Meadow.Foundation.Converters
  langs:
  - csharp
  - vb
  name: ByteToBCD(Byte)
  nameWithType: Converters.ByteToBCD(Byte)
  fullName: Meadow.Foundation.Converters.ByteToBCD(System.Byte)
  type: Method
  source:
    remote:
      path: Source/Meadow.Foundation/Helpers/Converters.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: ByteToBCD
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Helpers/Converters.cs
    startLine: 65
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation
  summary: "\nConvert a byte to BCD.\n"
  example: []
  syntax:
    content: public static byte ByteToBCD(byte v)
    parameters:
    - id: v
      type: System.Byte
      description: Byte value to encode.
    return:
      type: System.Byte
      description: BCD encoded version of the byte value.
    content.vb: Public Shared Function ByteToBCD(v As Byte) As Byte
  overload: Meadow.Foundation.Converters.ByteToBCD*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Meadow.Foundation.Converters.HsvToRgb(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)
  commentId: M:Meadow.Foundation.Converters.HsvToRgb(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)
  id: HsvToRgb(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)
  parent: Meadow.Foundation.Converters
  langs:
  - csharp
  - vb
  name: HsvToRgb(Double, Double, Double, out Double, out Double, out Double)
  nameWithType: Converters.HsvToRgb(Double, Double, Double, out Double, out Double, out Double)
  fullName: Meadow.Foundation.Converters.HsvToRgb(System.Double, System.Double, System.Double, out System.Double, out System.Double, out System.Double)
  type: Method
  source:
    remote:
      path: Source/Meadow.Foundation/Helpers/Converters.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: HsvToRgb
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Helpers/Converters.cs
    startLine: 86
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation
  summary: "\nHSV to rgb. Note that for RGB LED use, you probably want a constant 100% brightness. This doesn&apos;t do that. \nFor that Algorithm, check out: https://blog.adafruit.com/2012/03/14/constant-brightness-hsb-to-rgb-algorithm/\n"
  example: []
  syntax:
    content: public static void HsvToRgb(double hue, double saturation, double brightValue, out double r, out double g, out double b)
    parameters:
    - id: hue
      type: System.Double
      description: Hue in degress (0-359ยบ).
    - id: saturation
      type: System.Double
      description: Saturation.
    - id: brightValue
      type: System.Double
      description: Brightness value.
    - id: r
      type: System.Double
      description: The red component. (0-1)
    - id: g
      type: System.Double
      description: The green component. (0-1)
    - id: b
      type: System.Double
      description: The blue component. (0-1)
    content.vb: Public Shared Sub HsvToRgb(hue As Double, saturation As Double, brightValue As Double, ByRef r As Double, ByRef g As Double, ByRef b As Double)
  overload: Meadow.Foundation.Converters.HsvToRgb*
  nameWithType.vb: Converters.HsvToRgb(Double, Double, Double, ByRef Double, ByRef Double, ByRef Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Meadow.Foundation.Converters.HsvToRgb(System.Double, System.Double, System.Double, ByRef System.Double, ByRef System.Double, ByRef System.Double)
  name.vb: HsvToRgb(Double, Double, Double, ByRef Double, ByRef Double, ByRef Double)
references:
- uid: Meadow.Foundation
  commentId: N:Meadow.Foundation
  name: Meadow.Foundation
  nameWithType: Meadow.Foundation
  fullName: Meadow.Foundation
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Meadow.Foundation.Converters.Integer*
  commentId: Overload:Meadow.Foundation.Converters.Integer
  name: Integer
  nameWithType: Converters.Integer
  fullName: Meadow.Foundation.Converters.Integer
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Meadow.Foundation.Converters.Double*
  commentId: Overload:Meadow.Foundation.Converters.Double
  name: Double
  nameWithType: Converters.Double
  fullName: Meadow.Foundation.Converters.Double
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Meadow.Foundation.Converters.BCDToByte*
  commentId: Overload:Meadow.Foundation.Converters.BCDToByte
  name: BCDToByte
  nameWithType: Converters.BCDToByte
  fullName: Meadow.Foundation.Converters.BCDToByte
- uid: System.Byte
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Meadow.Foundation.Converters.ByteToBCD*
  commentId: Overload:Meadow.Foundation.Converters.ByteToBCD
  name: ByteToBCD
  nameWithType: Converters.ByteToBCD
  fullName: Meadow.Foundation.Converters.ByteToBCD
- uid: Meadow.Foundation.Converters.HsvToRgb*
  commentId: Overload:Meadow.Foundation.Converters.HsvToRgb
  name: HsvToRgb
  nameWithType: Converters.HsvToRgb
  fullName: Meadow.Foundation.Converters.HsvToRgb
