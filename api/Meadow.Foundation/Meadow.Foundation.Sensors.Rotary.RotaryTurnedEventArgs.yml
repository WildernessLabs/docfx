### YamlMime:ManagedReference
items:
- uid: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs
  commentId: T:Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs
  id: RotaryTurnedEventArgs
  parent: Meadow.Foundation.Sensors.Rotary
  children:
  - Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.#ctor(Meadow.Foundation.Sensors.Rotary.RotationDirection)
  - Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.Direction
  langs:
  - csharp
  - vb
  name: RotaryTurnedEventArgs
  nameWithType: RotaryTurnedEventArgs
  fullName: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs
  type: Class
  source:
    remote:
      path: Source/Meadow.Foundation/Sensors/Rotary/RotaryTurnedEventArgs.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: RotaryTurnedEventArgs
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Sensors/Rotary/RotaryTurnedEventArgs.cs
    startLine: 6
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation.Sensors.Rotary
  summary: "\n"
  example: []
  syntax:
    content: 'public class RotaryTurnedEventArgs : EventArgs'
    content.vb: >-
      Public Class RotaryTurnedEventArgs

          Inherits EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.Direction
  commentId: P:Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.Direction
  id: Direction
  parent: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs
  langs:
  - csharp
  - vb
  name: Direction
  nameWithType: RotaryTurnedEventArgs.Direction
  fullName: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.Direction
  type: Property
  source:
    remote:
      path: Source/Meadow.Foundation/Sensors/Rotary/RotaryTurnedEventArgs.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: Direction
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Sensors/Rotary/RotaryTurnedEventArgs.cs
    startLine: 11
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation.Sensors.Rotary
  summary: "\n\n"
  example: []
  syntax:
    content: public RotationDirection Direction { get; set; }
    parameters: []
    return:
      type: Meadow.Foundation.Sensors.Rotary.RotationDirection
    content.vb: Public Property Direction As RotationDirection
  overload: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.Direction*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.#ctor(Meadow.Foundation.Sensors.Rotary.RotationDirection)
  commentId: M:Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.#ctor(Meadow.Foundation.Sensors.Rotary.RotationDirection)
  id: '#ctor(Meadow.Foundation.Sensors.Rotary.RotationDirection)'
  parent: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs
  langs:
  - csharp
  - vb
  name: RotaryTurnedEventArgs(RotationDirection)
  nameWithType: RotaryTurnedEventArgs.RotaryTurnedEventArgs(RotationDirection)
  fullName: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.RotaryTurnedEventArgs(Meadow.Foundation.Sensors.Rotary.RotationDirection)
  type: Constructor
  source:
    remote:
      path: Source/Meadow.Foundation/Sensors/Rotary/RotaryTurnedEventArgs.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: .ctor
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Sensors/Rotary/RotaryTurnedEventArgs.cs
    startLine: 18
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation.Sensors.Rotary
  summary: "\nConstructor for SensorVectorEventArgs objects.\n"
  example: []
  syntax:
    content: public RotaryTurnedEventArgs(RotationDirection direction)
    parameters:
    - id: direction
      type: Meadow.Foundation.Sensors.Rotary.RotationDirection
    content.vb: Public Sub New(direction As RotationDirection)
  overload: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Meadow.Foundation.Sensors.Rotary
  commentId: N:Meadow.Foundation.Sensors.Rotary
  name: Meadow.Foundation.Sensors.Rotary
  nameWithType: Meadow.Foundation.Sensors.Rotary
  fullName: Meadow.Foundation.Sensors.Rotary
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.Direction*
  commentId: Overload:Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.Direction
  name: Direction
  nameWithType: RotaryTurnedEventArgs.Direction
  fullName: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.Direction
- uid: Meadow.Foundation.Sensors.Rotary.RotationDirection
  commentId: T:Meadow.Foundation.Sensors.Rotary.RotationDirection
  parent: Meadow.Foundation.Sensors.Rotary
  name: RotationDirection
  nameWithType: RotationDirection
  fullName: Meadow.Foundation.Sensors.Rotary.RotationDirection
- uid: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.#ctor*
  commentId: Overload:Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.#ctor
  name: RotaryTurnedEventArgs
  nameWithType: RotaryTurnedEventArgs.RotaryTurnedEventArgs
  fullName: Meadow.Foundation.Sensors.Rotary.RotaryTurnedEventArgs.RotaryTurnedEventArgs
