### YamlMime:ManagedReference
items:
- uid: Meadow.Foundation.Sensors.ICamera
  commentId: T:Meadow.Foundation.Sensors.ICamera
  id: ICamera
  parent: Meadow.Foundation.Sensors
  children:
  - Meadow.Foundation.Sensors.ICamera.TakePicture(System.String)
  langs:
  - csharp
  - vb
  name: ICamera
  nameWithType: ICamera
  fullName: Meadow.Foundation.Sensors.ICamera
  type: Interface
  source:
    remote:
      path: Source/Meadow.Foundation/Sensors/ICamera.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: ICamera
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Sensors/ICamera.cs
    startLine: 4
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation.Sensors
  syntax:
    content: public interface ICamera
    content.vb: Public Interface ICamera
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Meadow.Foundation.Sensors.ICamera.TakePicture(System.String)
  commentId: M:Meadow.Foundation.Sensors.ICamera.TakePicture(System.String)
  id: TakePicture(System.String)
  parent: Meadow.Foundation.Sensors.ICamera
  langs:
  - csharp
  - vb
  name: TakePicture(String)
  nameWithType: ICamera.TakePicture(String)
  fullName: Meadow.Foundation.Sensors.ICamera.TakePicture(System.String)
  type: Method
  source:
    remote:
      path: Source/Meadow.Foundation/Sensors/ICamera.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Foundation.git
    id: TakePicture
    path: ../Meadow.Foundation/Source/Meadow.Foundation/Sensors/ICamera.cs
    startLine: 6
  assemblies:
  - Meadow.Foundation
  namespace: Meadow.Foundation.Sensors
  syntax:
    content: Task<bool> TakePicture(string filename)
    parameters:
    - id: filename
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function TakePicture(filename As String) As Task(Of Boolean)
  overload: Meadow.Foundation.Sensors.ICamera.TakePicture*
references:
- uid: Meadow.Foundation.Sensors
  commentId: N:Meadow.Foundation.Sensors
  name: Meadow.Foundation.Sensors
  nameWithType: Meadow.Foundation.Sensors
  fullName: Meadow.Foundation.Sensors
- uid: Meadow.Foundation.Sensors.ICamera.TakePicture*
  commentId: Overload:Meadow.Foundation.Sensors.ICamera.TakePicture
  name: TakePicture
  nameWithType: ICamera.TakePicture
  fullName: Meadow.Foundation.Sensors.ICamera.TakePicture
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
