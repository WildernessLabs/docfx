### YamlMime:ManagedReference
items:
- uid: Meadow.Hardware.DigitalPortBase
  commentId: T:Meadow.Hardware.DigitalPortBase
  id: DigitalPortBase
  parent: Meadow.Hardware
  children:
  - Meadow.Hardware.DigitalPortBase.#ctor(Meadow.Hardware.PortDirectionType)
  - Meadow.Hardware.DigitalPortBase._direction
  - Meadow.Hardware.DigitalPortBase._state
  - Meadow.Hardware.DigitalPortBase.Direction
  - Meadow.Hardware.DigitalPortBase.SignalType
  - Meadow.Hardware.DigitalPortBase.State
  langs:
  - csharp
  - vb
  name: DigitalPortBase
  nameWithType: DigitalPortBase
  fullName: Meadow.Hardware.DigitalPortBase
  type: Class
  source:
    remote:
      path: source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Core.git
    id: DigitalPortBase
    path: ../Meadow.Core/source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
    startLine: 6
  assemblies:
  - Meadow.Core
  namespace: Meadow.Hardware
  summary: "\nDigitalPortBase provides a base implementation for much of the \ncommon tasks of classes implementing IDigitalPort.\n"
  example: []
  syntax:
    content: 'public abstract class DigitalPortBase : IDigitalPort, IPort'
    content.vb: >-
      Public MustInherit Class DigitalPortBase
          Implements IDigitalPort, IPort
  inheritance:
  - System.Object
  derivedClasses:
  - Meadow.Hardware.DigitalInputPortBase
  - Meadow.Hardware.DigitalOutputPortBase
  implements:
  - Meadow.Hardware.IDigitalPort
  - Meadow.Hardware.IPort
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Meadow.Hardware.DigitalPortBase.Direction
  commentId: P:Meadow.Hardware.DigitalPortBase.Direction
  id: Direction
  parent: Meadow.Hardware.DigitalPortBase
  langs:
  - csharp
  - vb
  name: Direction
  nameWithType: DigitalPortBase.Direction
  fullName: Meadow.Hardware.DigitalPortBase.Direction
  type: Property
  source:
    remote:
      path: source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Core.git
    id: Direction
    path: ../Meadow.Core/source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
    startLine: 13
  assemblies:
  - Meadow.Core
  namespace: Meadow.Hardware
  summary: "\nThe PortDirectionType property is backed by the readonly _direction member. \nThis member must be set during the constructor and describes whether the \nport in an input or output port.\n"
  example: []
  syntax:
    content: public PortDirectionType Direction { get; }
    parameters: []
    return:
      type: Meadow.Hardware.PortDirectionType
    content.vb: Public ReadOnly Property Direction As PortDirectionType
  overload: Meadow.Hardware.DigitalPortBase.Direction*
  implements:
  - Meadow.Hardware.IPort.Direction
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Meadow.Hardware.DigitalPortBase._direction
  commentId: F:Meadow.Hardware.DigitalPortBase._direction
  id: _direction
  parent: Meadow.Hardware.DigitalPortBase
  langs:
  - csharp
  - vb
  name: _direction
  nameWithType: DigitalPortBase._direction
  fullName: Meadow.Hardware.DigitalPortBase._direction
  type: Field
  source:
    remote:
      path: source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Core.git
    id: _direction
    path: ../Meadow.Core/source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
    startLine: 17
  assemblies:
  - Meadow.Core
  namespace: Meadow.Hardware
  syntax:
    content: protected readonly PortDirectionType _direction
    return:
      type: Meadow.Hardware.PortDirectionType
    content.vb: Protected ReadOnly _direction As PortDirectionType
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Meadow.Hardware.DigitalPortBase.SignalType
  commentId: P:Meadow.Hardware.DigitalPortBase.SignalType
  id: SignalType
  parent: Meadow.Hardware.DigitalPortBase
  langs:
  - csharp
  - vb
  name: SignalType
  nameWithType: DigitalPortBase.SignalType
  fullName: Meadow.Hardware.DigitalPortBase.SignalType
  type: Property
  source:
    remote:
      path: source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Core.git
    id: SignalType
    path: ../Meadow.Core/source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
    startLine: 22
  assemblies:
  - Meadow.Core
  namespace: Meadow.Hardware
  summary: "\nThe PortSignalType property returns PortSignalType.Digital.\n"
  example: []
  syntax:
    content: public SignalType SignalType { get; }
    parameters: []
    return:
      type: Meadow.Hardware.SignalType
    content.vb: Public ReadOnly Property SignalType As SignalType
  overload: Meadow.Hardware.DigitalPortBase.SignalType*
  implements:
  - Meadow.Hardware.IPort.SignalType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Meadow.Hardware.DigitalPortBase.State
  commentId: P:Meadow.Hardware.DigitalPortBase.State
  id: State
  parent: Meadow.Hardware.DigitalPortBase
  langs:
  - csharp
  - vb
  name: State
  nameWithType: DigitalPortBase.State
  fullName: Meadow.Hardware.DigitalPortBase.State
  type: Property
  source:
    remote:
      path: source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Core.git
    id: State
    path: ../Meadow.Core/source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
    startLine: 27
  assemblies:
  - Meadow.Core
  namespace: Meadow.Hardware
  summary: "\nGets or sets the port state, either high (true), or low (false).\n"
  example: []
  syntax:
    content: public virtual bool State { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property State As Boolean
  overload: Meadow.Hardware.DigitalPortBase.State*
  implements:
  - Meadow.Hardware.IDigitalPort.State
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Meadow.Hardware.DigitalPortBase._state
  commentId: F:Meadow.Hardware.DigitalPortBase._state
  id: _state
  parent: Meadow.Hardware.DigitalPortBase
  langs:
  - csharp
  - vb
  name: _state
  nameWithType: DigitalPortBase._state
  fullName: Meadow.Hardware.DigitalPortBase._state
  type: Field
  source:
    remote:
      path: source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Core.git
    id: _state
    path: ../Meadow.Core/source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
    startLine: 32
  assemblies:
  - Meadow.Core
  namespace: Meadow.Hardware
  syntax:
    content: protected bool _state
    return:
      type: System.Boolean
    content.vb: Protected _state As Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Meadow.Hardware.DigitalPortBase.#ctor(Meadow.Hardware.PortDirectionType)
  commentId: M:Meadow.Hardware.DigitalPortBase.#ctor(Meadow.Hardware.PortDirectionType)
  id: '#ctor(Meadow.Hardware.PortDirectionType)'
  parent: Meadow.Hardware.DigitalPortBase
  langs:
  - csharp
  - vb
  name: DigitalPortBase(PortDirectionType)
  nameWithType: DigitalPortBase.DigitalPortBase(PortDirectionType)
  fullName: Meadow.Hardware.DigitalPortBase.DigitalPortBase(Meadow.Hardware.PortDirectionType)
  type: Constructor
  source:
    remote:
      path: source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
      branch: master
      repo: https://github.com/WildernessLabs/Meadow.Core.git
    id: .ctor
    path: ../Meadow.Core/source/Meadow.Core/Hardware/Bases/DigitalPortBase.cs
    startLine: 34
  assemblies:
  - Meadow.Core
  namespace: Meadow.Hardware
  syntax:
    content: protected DigitalPortBase(PortDirectionType direction)
    parameters:
    - id: direction
      type: Meadow.Hardware.PortDirectionType
    content.vb: Protected Sub New(direction As PortDirectionType)
  overload: Meadow.Hardware.DigitalPortBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Meadow.Hardware
  commentId: N:Meadow.Hardware
  name: Meadow.Hardware
  nameWithType: Meadow.Hardware
  fullName: Meadow.Hardware
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Meadow.Hardware.IDigitalPort
  commentId: T:Meadow.Hardware.IDigitalPort
  parent: Meadow.Hardware
  name: IDigitalPort
  nameWithType: IDigitalPort
  fullName: Meadow.Hardware.IDigitalPort
- uid: Meadow.Hardware.IPort
  commentId: T:Meadow.Hardware.IPort
  parent: Meadow.Hardware
  name: IPort
  nameWithType: IPort
  fullName: Meadow.Hardware.IPort
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Meadow.Hardware.DigitalPortBase.Direction*
  commentId: Overload:Meadow.Hardware.DigitalPortBase.Direction
  name: Direction
  nameWithType: DigitalPortBase.Direction
  fullName: Meadow.Hardware.DigitalPortBase.Direction
- uid: Meadow.Hardware.IPort.Direction
  commentId: P:Meadow.Hardware.IPort.Direction
  parent: Meadow.Hardware.IPort
  name: Direction
  nameWithType: IPort.Direction
  fullName: Meadow.Hardware.IPort.Direction
- uid: Meadow.Hardware.PortDirectionType
  commentId: T:Meadow.Hardware.PortDirectionType
  parent: Meadow.Hardware
  name: PortDirectionType
  nameWithType: PortDirectionType
  fullName: Meadow.Hardware.PortDirectionType
- uid: Meadow.Hardware.DigitalPortBase.SignalType*
  commentId: Overload:Meadow.Hardware.DigitalPortBase.SignalType
  name: SignalType
  nameWithType: DigitalPortBase.SignalType
  fullName: Meadow.Hardware.DigitalPortBase.SignalType
- uid: Meadow.Hardware.IPort.SignalType
  commentId: P:Meadow.Hardware.IPort.SignalType
  parent: Meadow.Hardware.IPort
  name: SignalType
  nameWithType: IPort.SignalType
  fullName: Meadow.Hardware.IPort.SignalType
- uid: Meadow.Hardware.SignalType
  commentId: T:Meadow.Hardware.SignalType
  parent: Meadow.Hardware
  name: SignalType
  nameWithType: SignalType
  fullName: Meadow.Hardware.SignalType
- uid: Meadow.Hardware.DigitalPortBase.State*
  commentId: Overload:Meadow.Hardware.DigitalPortBase.State
  name: State
  nameWithType: DigitalPortBase.State
  fullName: Meadow.Hardware.DigitalPortBase.State
- uid: Meadow.Hardware.IDigitalPort.State
  commentId: P:Meadow.Hardware.IDigitalPort.State
  parent: Meadow.Hardware.IDigitalPort
  name: State
  nameWithType: IDigitalPort.State
  fullName: Meadow.Hardware.IDigitalPort.State
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Meadow.Hardware.DigitalPortBase.#ctor*
  commentId: Overload:Meadow.Hardware.DigitalPortBase.#ctor
  name: DigitalPortBase
  nameWithType: DigitalPortBase.DigitalPortBase
  fullName: Meadow.Hardware.DigitalPortBase.DigitalPortBase
